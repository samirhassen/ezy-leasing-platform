import { useEffect } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { Role, AuthSession } from '@/types/auth';
import { useAuthStore } from '@/stores/auth';
import { useToast } from '@/hooks/use-toast';

interface RouteGuardProps {
  children: React.ReactNode;
  requireAuth?: boolean;
  requireRole?: Role | Role[];
  requireTier3?: boolean;
}

export function RouteGuard({ 
  children, 
  requireAuth = true,
  requireRole,
  requireTier3 = false
}: RouteGuardProps) {
  const { session } = useAuthStore();
  const location = useLocation();
  const { toast } = useToast();

  // Bypass all auth checks if AUTH_DISABLED is true
  if (import.meta.env.VITE_AUTH_DISABLED === 'true') {
    return <>{children}</>;
  }

  // Allow access if no auth required
  if (!requireAuth) {
    return <>{children}</>;
  }

  // Check if user is authenticated
  if (!session) {
    const returnTo = encodeURIComponent(location.pathname + location.search);
    return <Navigate to={`/welcome?returnTo=${returnTo}`} replace />;
  }

  // Check role requirements
  if (requireRole) {
    const allowedRoles = Array.isArray(requireRole) ? requireRole : [requireRole];
    if (!allowedRoles.includes(session.role)) {
      toast({
        title: 'Access Denied',
        description: "You don't have access to that area.",
        variant: 'destructive'
      });
      return <Navigate to="/welcome" replace />;
    }
  }

  // Check Tier 3 requirement for tenants
  if (requireTier3 && session.role === 'TENANT' && session.uaePassTier !== '3') {
    return <Navigate to="/auth/tier-required" replace />;
  }

  return <>{children}</>;
}